---
import FormField from './FormField.astro';
import FormMessage from './FormMessage.astro';

const subjectOptions = [
  { value: 'general', label: 'General Inquiry' },
  { value: 'project', label: 'Project Collaboration' },
  { value: 'commission', label: 'Commission Request' },
  { value: 'press', label: 'Press & Media' },
  { value: 'other', label: 'Other' },
];
---

<form 
  class="contact-form" 
  data-contact-form
  novalidate
  aria-label="Contact form"
>
  <div class="contact-form__fields">
    <FormField
      type="text"
      name="name"
      label="Full Name"
      placeholder="Your full name"
      required
      validation="minLength:2,maxLength:50"
    />

    <FormField
      type="email"
      name="email"
      label="Email Address"
      placeholder="your@email.com"
      required
      validation="email,maxLength:100"
    />

    <FormField
      type="select"
      name="subject"
      label="Subject"
      required
      options={subjectOptions}
      validation="required"
    />

    <FormField
      type="textarea"
      name="message"
      label="Message"
      placeholder="Tell me about your project or inquiry..."
      required
      rows={6}
      validation="minLength:10,maxLength:1000"
    >
      <div slot="help">
        Share details about your project, timeline, and any specific requirements.
      </div>
    </FormField>

    <!-- Privacy consent checkbox -->
    <div class="privacy-consent">
      <label class="privacy-consent__label">
        <input 
          type="checkbox" 
          name="privacy_consent" 
          class="privacy-consent__checkbox"
          required
        />
        <span class="privacy-consent__checkmark" aria-hidden="true"></span>
        <span class="privacy-consent__text">
          I agree to the <a href="/privacy" target="_blank" rel="noopener" class="privacy-link">Privacy Policy</a> 
          and <a href="/terms" target="_blank" rel="noopener" class="privacy-link">Terms & Conditions</a>
        </span>
      </label>
      <div class="privacy-consent__error" role="alert" aria-live="polite">
        <div class="privacy-consent__error-content">
          You must agree to the Privacy Policy and Terms & Conditions to continue.
        </div>
      </div>
    </div>
  </div>

  <div class="contact-form__actions">
    <button 
      type="submit" 
      class="contact-form__submit focusable"
      data-submit-button
    >
      <span class="contact-form__submit-text">Send Message</span>
      <span class="contact-form__submit-loading" aria-hidden="true">
        <svg class="contact-form__spinner" width="20" height="20" viewBox="0 0 24 24" fill="none">
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" opacity="0.25"/>
          <path fill="currentColor" opacity="0.75" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
        </svg>
        Sending...
      </span>
    </button>
  </div>

  <!-- Message container for form-wide messages -->
  <div class="contact-form__messages" data-form-messages>
    <!-- Success/error messages will be inserted here -->
  </div>
</form>

<style>
  /* Style for 'Choose an option' placeholder */
  .contact-form select:invalid,
  .contact-form select option[value=""] {
    color: var(--color-text-placeholder);
  }

  .contact-form {
    width: 100%;
    max-width: 600px;
  }

  .contact-form__fields {
    margin-bottom: var(--spacing-lg);
    display: flex;
    flex-direction: column;
    gap: var(--spacing-lg);
  }

  .contact-form__actions {
    display: flex;
    justify-content: flex-end;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-md);
  }

  .contact-form__submit {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: 2px;
    font-family: var(--font-alt-heading);
    font-size: var(--text-base);
    font-weight: 400;
    cursor: pointer;
    transition: all var(--transition-fast);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    min-width: 140px;
    position: relative;
  }

  .contact-form__submit:hover:not(:disabled) {
    background: var(--color-primary-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(50, 92, 89, 0.3);
  }

  .contact-form__submit:focus {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }

  .contact-form__submit:disabled {
    background: rgba(50, 92, 89, 0.6);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .contact-form__submit-loading {
    display: none;
  }

  .contact-form--submitting .contact-form__submit-text {
    display: none;
  }

  .contact-form--submitting .contact-form__submit-loading {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .contact-form__spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .contact-form__messages {
    margin-top: var(--spacing-md);
  }

  /* Privacy consent styling */
  .privacy-consent {
    margin-top: var(--spacing-sm);
    position: relative;
  }

  .privacy-consent__label {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-sm);
    cursor: pointer;
    font-size: var(--text-sm);
    line-height: 1.5;
  }

  .privacy-consent__checkbox {
    position: absolute;
    opacity: 0;
    width: 1px;
    height: 1px;
  }

  .privacy-consent__checkmark {
    flex-shrink: 0;
    width: 18px;
    height: 18px;
    border: 2px solid var(--color-border);
    border-radius: 3px;
    background: var(--color-background);
    position: relative;
    transition: all var(--transition-fast);
    margin-top: 2px;
  }

  .privacy-consent__checkmark::after {
    content: '';
    position: absolute;
    top: 3px;
    left: 3px;
    right: 3px;
    bottom: 3px;
    background: var(--color-primary);
    border-radius: 1px;
    opacity: 0;
    transition: opacity var(--transition-fast);
  }

  .privacy-consent__checkbox:checked + .privacy-consent__checkmark {
    border-color: var(--color-primary);
  }

  .privacy-consent__checkbox:checked + .privacy-consent__checkmark::after {
    opacity: 1;
  }

  .privacy-consent__checkbox:focus + .privacy-consent__checkmark {
    outline: 2px solid transparent;
    outline-offset: 2px;
  }

  .privacy-consent__text {
    color: var(--color-text-secondary);
  }

  .privacy-link {
    color: var(--color-primary);
    text-decoration: underline;
    transition: color var(--transition-fast);
  }

  .privacy-link:hover {
    color: var(--color-primary-hover);
  }

  .privacy-link:focus {
    outline: 2px solid transparent;
    outline-offset: 1px;
    border-radius: 2px;
  }

  .privacy-consent__error {
    position: absolute;
    top: -12px;
    left: 30px;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-8px);
    transition: all var(--transition-fast);
    pointer-events: none;
  }

  .privacy-consent__error-content {
    background: rgba(50, 92, 89, 0.92);
    color: white;
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: 6px;
    font-size: var(--text-xs);
    line-height: 1.4;
    white-space: nowrap;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    position: relative;
    backdrop-filter: blur(4px);
  }

  .privacy-consent__error-content::before {
    content: '';
    position: absolute;
    top: 50%;
    left: -6px;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 6px 6px 6px 0;
    border-color: transparent rgba(50, 92, 89, 0.92) transparent transparent;
  }

  .privacy-consent--error .privacy-consent__checkmark {
    border-color: var(--color-primary);
    animation: shake 0.5s ease-in-out;
  }

  .privacy-consent--error .privacy-consent__error {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-2px); }
    75% { transform: translateX(2px); }
  }

  /* Success state */
  .contact-form--success .contact-form__submit {
    background: #16a34a;
  }

  .contact-form--success .contact-form__submit:hover:not(:disabled) {
    background: #15803d;
  }

  /* Error state - highlight submit button */
  .contact-form--error .contact-form__submit {
    background: #dc2626;
  }

  .contact-form--error .contact-form__submit:hover:not(:disabled) {
    background: #b91c1c;
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .contact-form__submit {
      border: 2px solid;
      font-weight: 600;
    }

    .privacy-consent__checkmark {
      border-width: 3px;
    }

    .privacy-link {
      font-weight: 600;
    }
  }

  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .contact-form__submit {
      transition: none;
    }

    .contact-form__submit:hover:not(:disabled) {
      transform: none;
    }

    .contact-form__spinner {
      animation: none;
    }

    .privacy-consent__checkmark {
      transition: none;
    }
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .contact-form__fields {
      gap: var(--spacing-xxs);
      margin-bottom: var(--spacing-xxs);
    }

    .contact-form textarea[name="message"] {
      min-height: 10vh;
    }

    /* Using :global to target a class from the FormField child component */
    .contact-form :global(.form-field__help) {
      font-size: var(--text-xs);
      margin-top: var(--spacing-xxs);
    }

    .contact-form__actions {
      justify-content: stretch;
    }

    .contact-form__submit {
      width: 100%;
      padding: var(--spacing-sm); /* Compacted padding */
      font-size: var(--text-base); /* Compacted font size */
    }

    .privacy-consent__label {
      font-size: var(--text-xs);
    }

    .privacy-consent__error-content {
      font-size: 11px;
      white-space: normal;
      max-width: 200px;
    }
  }
</style>

<script>
  import { 
    FormValidator, 
    contactFormConfig, 
    createSafeContactFormData,
    type ContactFormData,
    type ValidationResult 
  } from './FormValidation';

  /**
   * Contact Form Handler with real-time validation
   */
  class ContactFormHandler {
    private form: HTMLFormElement;
    private validator: FormValidator;
    private isSubmitting = false;
    private fields: Map<string, HTMLElement> = new Map();
    private submitButton: HTMLButtonElement;
    private messagesContainer: HTMLElement;
    private privacyConsent: HTMLInputElement;

    constructor(formElement: HTMLFormElement) {
      this.form = formElement;
      this.validator = new FormValidator();
      this.submitButton = this.form.querySelector('[data-submit-button]') as HTMLButtonElement;
      this.messagesContainer = this.form.querySelector('[data-form-messages]') as HTMLElement;
      this.privacyConsent = this.form.querySelector('input[name="privacy_consent"]') as HTMLInputElement;
      
      this.setupFields();
      this.attachEventListeners();
    }

    private setupFields(): void {
      contactFormConfig.forEach(config => {
        const fieldContainer = this.form.querySelector(`[data-field-name="${config.name}"]`) as HTMLElement;
        const fieldElement = fieldContainer?.querySelector('input, textarea, select') as HTMLElement;
        
        if (fieldElement) {
          this.fields.set(config.name, fieldElement);
        }
      });
    }

    private attachEventListeners(): void {
      // Form submission
      this.form.addEventListener('submit', this.handleSubmit.bind(this));

      // Real-time validation on blur and input
      this.fields.forEach((field, name) => {
        field.addEventListener('blur', () => this.validateField(name));
        field.addEventListener('input', () => this.clearFieldError(name));
      });

      // Privacy consent validation - only clear error on change, don't validate
      if (this.privacyConsent) {
        this.privacyConsent.addEventListener('change', () => {
          const consentContainer = this.form.querySelector('.privacy-consent') as HTMLElement;
          if (this.privacyConsent?.checked) {
            consentContainer?.classList.remove('privacy-consent--error');
          }
        });
      }
    }

    private async handleSubmit(event: SubmitEvent): Promise<void> {
      event.preventDefault();
      
      if (this.isSubmitting) return;

      // Validate privacy consent first
      if (!this.validatePrivacyConsent()) {
        return;
      }

      // Client-side validation
      const formData = new FormData(this.form);
      const validation = this.validator.validateForm(formData, contactFormConfig);
      
      if (!validation.isValid) {
        this.displayErrors(validation.errors);
        this.focusFirstError();
        return;
      }

      // Clear any previous errors
      this.clearAllErrors();

      // Submit to API
      await this.submitToAPI(formData);
    }

    private validatePrivacyConsent(): boolean {
      const consentContainer = this.form.querySelector('.privacy-consent') as HTMLElement;
      
      if (!this.privacyConsent?.checked) {
        consentContainer?.classList.add('privacy-consent--error');
        this.privacyConsent?.focus();
        
        // Auto-hide error after 4 seconds
        setTimeout(() => {
          consentContainer?.classList.remove('privacy-consent--error');
        }, 4000);
        
        return false;
      } else {
        consentContainer?.classList.remove('privacy-consent--error');
        return true;
      }
    }

    private async submitToAPI(formData: FormData): Promise<void> {
      this.setSubmittingState(true);

      try {
        const contactData = createSafeContactFormData(Object.fromEntries(formData));
        
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json',
          },
          body: JSON.stringify(contactData)
        });

        const result = await response.json();

        if (response.ok && result.success) {
          this.showSuccessMessage(result.message || 'Message sent successfully!');
          this.resetForm();
          this.form.classList.add('contact-form--success');
          
          // Announce success to screen readers
          this.announceToScreenReader('Message sent successfully');
        } else {
          // Handle API validation errors
          if (result.errors) {
            this.displayErrors(result.errors);
          } else {
            this.showErrorMessage(result.message || 'Failed to send message. Please try again.');
          }
          this.form.classList.add('contact-form--error');
        }
        
      } catch (error) {
        console.error('Contact form submission error:', error);
        this.showErrorMessage('Network error. Please check your connection and try again.');
        this.form.classList.add('contact-form--error');
      } finally {
        this.setSubmittingState(false);
      }
    }

    private validateField(fieldName: string): void {
      const fieldConfig = contactFormConfig.find(config => config.name === fieldName);
      const fieldElement = this.fields.get(fieldName) as HTMLInputElement;
      
      if (!fieldConfig || !fieldElement) return;

      const value = fieldElement.value;
      const error = this.validator.validateField(value, fieldConfig.rules);

      if (error) {
        this.showFieldError(fieldName, error);
      } else {
        this.clearFieldError(fieldName);
      }
    }

    private showFieldError(fieldName: string, errorMessage: string): void {
      const fieldContainer = this.form.querySelector(`[data-field-name="${fieldName}"]`) as HTMLElement;
      const errorElement = fieldContainer?.querySelector('.form-field__error') as HTMLElement;
      const errorContent = fieldContainer?.querySelector('.form-field__error-content') as HTMLElement;
      
      if (fieldContainer && errorElement && errorContent) {
        fieldContainer.classList.add('form-field--error');
        errorContent.textContent = errorMessage;
        
        // Auto-hide error after 4 seconds
        setTimeout(() => {
          fieldContainer.classList.remove('form-field--error');
        }, 4000);
      }
    }

    private clearFieldError(fieldName: string): void {
      const fieldContainer = this.form.querySelector(`[data-field-name="${fieldName}"]`) as HTMLElement;
      
      if (fieldContainer) {
        fieldContainer.classList.remove('form-field--error', 'form-field--valid');
        
        // Add valid state if field has content
        const fieldElement = this.fields.get(fieldName) as HTMLInputElement;
        if (fieldElement?.value.trim()) {
          fieldContainer.classList.add('form-field--valid');
        }
      }
    }

    private displayErrors(errors: Record<string, string>): void {
      Object.entries(errors).forEach(([fieldName, errorMessage]) => {
        this.showFieldError(fieldName, errorMessage);
      });
    }

    private clearAllErrors(): void {
      this.fields.forEach((_, fieldName) => {
        this.clearFieldError(fieldName);
      });
      this.messagesContainer.innerHTML = '';
      this.form.classList.remove('contact-form--error', 'contact-form--success');
      
      // Clear privacy consent error
      const consentContainer = this.form.querySelector('.privacy-consent') as HTMLElement;
      consentContainer?.classList.remove('privacy-consent--error');
    }

    private focusFirstError(): void {
      const firstErrorField = this.form.querySelector('.form-field--error input, .form-field--error textarea, .form-field--error select, .privacy-consent--error input') as HTMLElement;
      if (firstErrorField) {
        firstErrorField.focus();
      }
    }

    private showSuccessMessage(message: string): void {
      const messageHTML = `
        <div class="form-message form-message--success" role="status" aria-live="polite">
          <div class="form-message__icon" aria-hidden="true">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="form-message__content">
            <p class="form-message__text">${message}</p>
          </div>
        </div>
      `;
      this.messagesContainer.innerHTML = messageHTML;
    }

    private showErrorMessage(message: string): void {
      const messageHTML = `
        <div class="form-message form-message--error" role="alert" aria-live="assertive">
          <div class="form-message__icon" aria-hidden="true">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
              <path d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="form-message__content">
            <p class="form-message__text">${message}</p>
          </div>
        </div>
      `;
      this.messagesContainer.innerHTML = messageHTML;
    }

    private setSubmittingState(isSubmitting: boolean): void {
      this.isSubmitting = isSubmitting;
      this.submitButton.disabled = isSubmitting;
      
      if (isSubmitting) {
        this.form.classList.add('contact-form--submitting');
      } else {
        this.form.classList.remove('contact-form--submitting');
      }
    }

    private resetForm(): void {
      this.form.reset();
      this.clearAllErrors();
    }

    private announceToScreenReader(message: string): void {
      // Create or find existing live region
      let liveRegion = document.getElementById('form-live-region');
      if (!liveRegion) {
        liveRegion = document.createElement('div');
        liveRegion.id = 'form-live-region';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.style.position = 'absolute';
        liveRegion.style.left = '-10000px';
        liveRegion.style.width = '1px';
        liveRegion.style.height = '1px';
        liveRegion.style.overflow = 'hidden';
        document.body.appendChild(liveRegion);
      }

      // Clear and set message
      liveRegion.textContent = '';
      setTimeout(() => {
        liveRegion.textContent = message;
      }, 100);
    }
  }

  // Initialize contact forms when DOM is ready
  function initializeContactForms(): void {
    const forms = document.querySelectorAll('[data-contact-form]') as NodeListOf<HTMLFormElement>;
    forms.forEach(form => {
      new ContactFormHandler(form);
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeContactForms);
  } else {
    initializeContactForms();
  }
</script>
