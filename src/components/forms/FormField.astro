---
export interface Props {
  type: 'text' | 'email' | 'textarea' | 'select';
  name: string;
  label: string;
  required?: boolean;
  placeholder?: string;
  value?: string;
  options?: Array<{ value: string; label: string; }>;
  rows?: number;
  class?: string;
  id?: string;
  validation?: string;
  'aria-describedby'?: string;
}

const {
  type,
  name,
  label,
  required = false,
  placeholder,
  value = '',
  options = [],
  rows = 4,
  class: className,
  id = `field-${name}`,
  validation,
  'aria-describedby': ariaDescribedBy,
} = Astro.props;

const fieldId = id;
const errorId = `${fieldId}-error`;
const helpId = `${fieldId}-help`;
---

<div class={`form-field ${className || ''}`} data-field-name={name}>
  <label for={fieldId} class="form-field__label">
    {label}
    {required && <span class="form-field__required" aria-label="required">*</span>}
  </label>
  
  {type === 'text' || type === 'email' ? (
    <input
      type={type}
      id={fieldId}
      name={name}
      value={value}
      placeholder={placeholder}
      required={required}
      class="form-field__input focusable"
      aria-describedby={ariaDescribedBy || `${errorId} ${helpId}`.trim()}
      data-validation={validation}
    />
  ) : type === 'textarea' ? (
    <textarea
      id={fieldId}
      name={name}
      placeholder={placeholder}
      required={required}
      rows={rows}
      class="form-field__textarea focusable"
      aria-describedby={ariaDescribedBy || `${errorId} ${helpId}`.trim()}
      data-validation={validation}
    >{value}</textarea>
  ) : type === 'select' ? (
    <select
      id={fieldId}
      name={name}
      required={required}
      class="form-field__select focusable"
      aria-describedby={ariaDescribedBy || `${errorId} ${helpId}`.trim()}
      data-validation={validation}
    >
      <option value="">Choose an option...</option>
      {options.map(option => (
        <option value={option.value} selected={value === option.value}>
          {option.label}
        </option>
      ))}
    </select>
  ) : null}

  {validation && (
    <div id={helpId} class="form-field__help">
      <slot name="help" />
    </div>
  )}

  <div 
    id={errorId} 
    class="form-field__error" 
    role="alert" 
    aria-live="polite"
    aria-atomic="true"
  ></div>
</div>

<style>
  .form-field {
    margin-bottom: var(--spacing-md);
  }

  .form-field__label {
    display: block;
    font-family: var(--font-alt-heading);
    font-size: var(--text-sm);
    font-weight: 400;
    color: var(--color-text-primary);
    margin-bottom: var(--spacing-xs);
    line-height: var(--leading-snug);
  }

  .form-field__required {
    color: #dc2626;
    margin-left: 0.25rem;
  }

  .form-field__input,
  .form-field__textarea,
  .form-field__select {
    width: 100%;
    padding: var(--spacing-sm);
    border: 1px solid rgba(0, 0, 0, 0.2);
    border-radius: 2px;
    font-family: var(--font-body);
    font-size: var(--text-base);
    color: var(--color-text-primary);
    background-color: #ffffff;
    transition: all var(--transition-fast);
    line-height: var(--leading-normal);
  }

  .form-field__input:hover,
  .form-field__textarea:hover,
  .form-field__select:hover {
    border-color: var(--color-primary);
  }

  .form-field__input:focus,
  .form-field__textarea:focus,
  .form-field__select:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
    border-color: var(--color-primary);
  }

  .form-field__textarea {
    resize: vertical;
    min-height: 120px;
  }

  .form-field__select {
    cursor: pointer;
  }

  /* Placeholder styling */
  .form-field__input::placeholder,
  .form-field__textarea::placeholder {
    color: rgba(0, 0, 0, 0.5);
    font-style: italic;
  }

  /* Error state */
  .form-field--error .form-field__input,
  .form-field--error .form-field__textarea,
  .form-field--error .form-field__select {
    border-color: #dc2626;
    background-color: #fef2f2;
  }

  .form-field--error .form-field__input:focus,
  .form-field--error .form-field__textarea:focus,
  .form-field--error .form-field__select:focus {
    outline-color: #dc2626;
    border-color: #dc2626;
  }

  .form-field__error {
    margin-top: var(--spacing-xs);
    font-size: var(--text-sm);
    color: #dc2626;
    min-height: 1.25rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .form-field__error:empty {
    display: none;
  }

  .form-field__error::before {
    content: 'âš ';
    font-size: 1rem;
    flex-shrink: 0;
  }

  .form-field__help {
    margin-top: var(--spacing-xs);
    font-size: var(--text-sm);
    color: rgba(0, 0, 0, 0.6);
    line-height: var(--leading-normal);
  }

  /* Valid state */
  .form-field--valid .form-field__input,
  .form-field--valid .form-field__textarea,
  .form-field--valid .form-field__select {
    border-color: #16a34a;
    background-color: #f0fdf4;
  }

  /* Disabled state */
  .form-field__input:disabled,
  .form-field__textarea:disabled,
  .form-field__select:disabled {
    background-color: #f5f5f5;
    color: rgba(0, 0, 0, 0.5);
    cursor: not-allowed;
    border-color: rgba(0, 0, 0, 0.1);
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .form-field__input,
    .form-field__textarea,
    .form-field__select {
      border-width: 2px;
    }

    .form-field--error .form-field__input,
    .form-field--error .form-field__textarea,
    .form-field--error .form-field__select {
      border-width: 3px;
    }
  }

  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .form-field__input,
    .form-field__textarea,
    .form-field__select {
      transition: none;
    }
  }

  /* Mobile optimizations */
  @media (max-width: var(--breakpoint-sm)) {
    .form-field__input,
    .form-field__textarea,
    .form-field__select {
      font-size: 16px; /* Prevent zoom on iOS */
    }
  }
</style>
