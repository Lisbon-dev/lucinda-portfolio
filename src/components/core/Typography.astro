---
export interface Props {
  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span' | 'div';
  variant?: 'header' | 'nav' | 'explanatory' | 'small' | 'body' | 'display';
  size?: 'xxs' | 'xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl';
  weight?: '300' | '400' | '500' | '600' | '700';
  tracking?: 'tight' | 'normal' | 'wide' | 'wider' | 'widest';
  leading?: 'tight' | 'snug' | 'normal' | 'relaxed' | 'loose';
  color?: 'primary' | 'secondary' | 'custom';
  customColor?: string;
  class?: string;
}

const {
  as: Tag = 'p',
  variant,
  size,
  weight,
  tracking,
  leading,
  color,
  customColor,
  class: className = '',
} = Astro.props;

// Variant-based defaults
const variantDefaults = {
  header: { size: '4xl', weight: '400', tracking: 'tight', leading: 'tight' },
  nav: { size: 'base', weight: '400', tracking: 'wider' },
  explanatory: { size: 'base', weight: '300', leading: 'relaxed' },
  small: { size: 'sm', weight: '300' },
  body: { size: 'base', weight: '400', leading: 'normal' },
  display: { size: '5xl', weight: '300', tracking: 'tight', leading: 'tight' }
};

const defaults = variant ? variantDefaults[variant] : {};
const finalSize = size || defaults.size || 'base';
const finalWeight = weight || defaults.weight || '400';
const finalTracking = tracking || defaults.tracking || 'normal';
const finalLeading = leading || defaults.leading || 'normal';

const typographyClasses = [
  'typography',
  `text--${finalSize}`,
  `weight--${finalWeight}`,
  `tracking--${finalTracking}`,
  `leading--${finalLeading}`,
  color && `color--${color}`,
  variant && `variant--${variant}`,
  className
].filter(Boolean).join(' ');

const inlineStyles = customColor ? `color: ${customColor};` : '';
---

<Tag class={typographyClasses} style={inlineStyles}>
  <slot />
</Tag>

<style>
  .typography {
    font-family: var(--font-alt-heading);
    margin: 0;
  }

  /* Size classes */
  .text--xxs { font-size: var(--text-xxs); }
  .text--xs { font-size: var(--text-xs); }
  .text--sm { font-size: var(--text-sm); }
  .text--base { font-size: var(--text-base); }
  .text--lg { font-size: var(--text-lg); }
  .text--xl { font-size: var(--text-xl); }
  .text--2xl { font-size: var(--text-2xl); }
  .text--3xl { font-size: var(--text-3xl); }
  .text--4xl { font-size: var(--text-4xl); }
  .text--5xl { font-size: var(--text-5xl); }

  /* Weight classes */
  .weight--300 { font-weight: 300; }
  .weight--400 { font-weight: 400; }
  .weight--500 { font-weight: 500; }
  .weight--600 { font-weight: 600; }
  .weight--700 { font-weight: 700; }

  /* Tracking classes */
  .tracking--tight { letter-spacing: var(--tracking-tight); }
  .tracking--normal { letter-spacing: var(--tracking-normal); }
  .tracking--wide { letter-spacing: var(--tracking-wide); }
  .tracking--wider { letter-spacing: var(--tracking-wider); }
  .tracking--widest { letter-spacing: var(--tracking-widest); }

  /* Leading classes */
  .leading--tight { line-height: var(--leading-tight); }
  .leading--snug { line-height: var(--leading-snug); }
  .leading--normal { line-height: var(--leading-normal); }
  .leading--relaxed { line-height: var(--leading-relaxed); }
  .leading--loose { line-height: var(--leading-loose); }

  /* Color classes */
  .color--primary { color: var(--color-text-primary); }
  .color--secondary { color: var(--color-text-secondary); }

  /* Variant-specific overrides */
  .variant--header, .variant--display {
    font-family: var(--font-alt-heading);
  }
</style>