---
export interface Props {
  class?: string;
}

const {
  class: className = '',
} = Astro.props;

const headerClasses = [
  'header-container',
  className
].filter(Boolean).join(' ');
---

<div class={headerClasses}>
  <!-- Desktop MENU button (top-right fixed) -->
  <button 
    class="menu-button interactive-element" 
    type="button"
    aria-label="Toggle navigation menu"
    aria-expanded="false"
    aria-controls="main-header"
  >
    MENU
  </button>

  <!-- Main header - starts hidden on mobile, toggleable on desktop -->
  <header class="main-header" id="main-header" aria-hidden="true">
    <nav class="header-nav" role="navigation" aria-label="Main navigation">
      <button 
        class="nav-button about-button"
        onclick="document.getElementById('about-dialog').showModal()"
      >
        About
      </button>
      <a 
        href="/"
        class="nav-button work-button"
        aria-label="View work and projects"
      >
        Works
      </a>
      <button 
        class="nav-button contact-button"
        onclick="document.getElementById('contact-dialog').showModal()"
      >
        Contact
      </button>
    </nav>
  </header>
</div>

<script>
  class HeaderController {
    private menuButton: HTMLButtonElement | null;
    private header: HTMLElement | null;
    private isDesktop: boolean = false;
    private isMenuOpen: boolean = false;
    private scrollThreshold: number = 20;
    private rafId: number | null = null;
    private isTransitioning: boolean = false;

    constructor() {
      this.menuButton = document.querySelector('.menu-button');
      this.header = document.querySelector('.main-header');
      
      if (!this.menuButton || !this.header) {
        console.warn('HeaderController: Required elements not found');
        return;
      }

      this.init();
    }

    private init(): void {
      // Determine initial viewport
      this.isDesktop = window.matchMedia('(min-width: 769px)').matches;
      
      // Set initial state based on viewport
      this.setInitialState();
      
      // Setup event listeners
      this.setupEventListeners();
      
      // Initialize scroll behavior for mobile
      if (!this.isDesktop) {
        this.updateMobileHeaderVisibility();
      }
    }

    private setInitialState(): void {
      if (!this.header) return;

      if (this.isDesktop) {
        // Desktop: header hidden, controlled by menu button
        this.header.classList.remove('header--visible');
        this.header.setAttribute('aria-hidden', 'true');
      } else {
        // Mobile: header visibility based on scroll position
        const scrollY = Math.max(0, window.scrollY);
        if (scrollY > this.scrollThreshold) {
          this.showHeader();
        } else {
          this.hideHeader();
        }
      }
    }

    private setupEventListeners(): void {
      // Viewport change detection
      const mediaQuery = window.matchMedia('(min-width: 769px)');
      mediaQuery.addEventListener('change', (e) => this.handleViewportChange(e.matches));

      // Desktop menu toggle
      if (this.isDesktop) {
        this.menuButton?.addEventListener('click', () => this.toggleMenu());
      }

      // Mobile scroll behavior
      if (!this.isDesktop) {
        window.addEventListener('scroll', () => this.handleScroll(), { passive: true });
      }

      // Keyboard navigation
      document.addEventListener('keydown', (e) => this.handleKeyboard(e));

      // Close menu when clicking nav items
      this.header?.querySelectorAll('.nav-button').forEach(button => {
        button.addEventListener('click', () => {
          if (this.isDesktop && this.isMenuOpen) {
            this.closeMenu();
          }
        });
      });
    }

    private handleViewportChange(isDesktop: boolean): void {
      this.isDesktop = isDesktop;

      // Cancel any pending RAF
      if (this.rafId !== null) {
        cancelAnimationFrame(this.rafId);
        this.rafId = null;
      }

      if (isDesktop) {
        // Switched to desktop
        this.header?.classList.remove('header--visible');
        this.closeMenu();
        window.removeEventListener('scroll', () => this.handleScroll());
        this.menuButton?.addEventListener('click', () => this.toggleMenu());
      } else {
        // Switched to mobile
        this.closeMenu();
        this.menuButton?.removeEventListener('click', () => this.toggleMenu());
        window.addEventListener('scroll', () => this.handleScroll(), { passive: true });
        this.updateMobileHeaderVisibility();
      }
    }

    private handleScroll(): void {
      if (this.isDesktop || this.rafId !== null) return;

      this.rafId = requestAnimationFrame(() => {
        this.updateMobileHeaderVisibility();
        this.rafId = null;
      });
    }

    private updateMobileHeaderVisibility(): void {
      if (this.isDesktop || !this.header || this.isTransitioning) return;

      const scrollY = Math.max(0, window.scrollY);
      const shouldShow = scrollY > this.scrollThreshold;
      const isCurrentlyVisible = this.header.classList.contains('header--visible');

      if (shouldShow !== isCurrentlyVisible) {
        this.isTransitioning = true;

        if (shouldShow) {
          this.showHeader();
        } else {
          this.hideHeader();
        }

        // Reset transition flag after animation completes
        setTimeout(() => {
          this.isTransitioning = false;
        }, 600); // Match CSS transition duration
      }
    }

    private toggleMenu(): void {
      if (!this.isDesktop) return;

      if (this.isMenuOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    private openMenu(): void {
      if (!this.header || !this.menuButton) return;

      this.header.classList.add('header--visible');
      this.header.setAttribute('aria-hidden', 'false');
      this.menuButton.setAttribute('aria-expanded', 'true');
      this.isMenuOpen = true;

      this.announceToScreenReader('Navigation menu opened');
    }

    private closeMenu(): void {
      if (!this.header || !this.menuButton) return;

      this.header.classList.remove('header--visible');
      this.header.setAttribute('aria-hidden', 'true');
      this.menuButton.setAttribute('aria-expanded', 'false');
      this.isMenuOpen = false;

      this.announceToScreenReader('Navigation menu closed');
    }

    private showHeader(): void {
      if (!this.header) return;
      this.header.classList.add('header--visible');
      this.header.setAttribute('aria-hidden', 'false');
    }

    private hideHeader(): void {
      if (!this.header) return;
      this.header.classList.remove('header--visible');
      this.header.setAttribute('aria-hidden', 'true');
    }

    private handleKeyboard(e: KeyboardEvent): void {
      if (e.key === 'Escape' && this.isMenuOpen) {
        this.closeMenu();
      }
    }

    private announceToScreenReader(message: string): void {
      let liveRegion = document.getElementById('header-live-region');
      
      if (!liveRegion) {
        liveRegion = document.createElement('div');
        liveRegion.id = 'header-live-region';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.className = 'sr-only';
        document.body.appendChild(liveRegion);
      }

      liveRegion.textContent = '';
      setTimeout(() => {
        if (liveRegion) liveRegion.textContent = message;
      }, 100);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new HeaderController());
  } else {
    new HeaderController();
  }
</script>

<style>
  /* ============================================
     HEADER CONTAINER
     ============================================ */
  .header-container {
    position: relative;
    z-index: 1000;
  }

  /* ============================================
     MENU BUTTON (Desktop only)
     ============================================ */
  .menu-button {
    position: fixed;
    top: var(--spacing-md);
    right: var(--spacing-lg);
    z-index: 1001;
    
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing-sm);
    
    font-family: var(--font-heading);
    font-size: var(--text-base);
    font-weight: 400;
    color: var(--color-text-primary);
    letter-spacing: var(--tracking-wider);
    
    transition: color var(--transition-normal);
  }

  .menu-button:hover {
    color: var(--color-primary);
  }

  .menu-button:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 2px;
  }

  /* ============================================
     MAIN HEADER
     ============================================ */
  .main-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    
    /* Height based on wireframe: 85px for 982px viewport = 8.66vh */
    height: max(8.66vh, 85px);
    
    background-color: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-md) var(--spacing-lg);
    
    /* Hidden by default - slides down from top */
    transform: translateY(-100%);
    transition: transform 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
    
    /* Performance optimizations */
    will-change: transform;
    contain: layout style paint;
  }

  /* Visible state - slides into view */
  .main-header.header--visible {
    transform: translateY(0);
  }

  /* ============================================
     NAVIGATION
     ============================================ */
  .header-nav {
    display: flex;
    gap: var(--spacing-2xl);
    align-items: center;
  }

  .nav-button {
    font-family: var(--font-heading);
    font-size: var(--text-base);
    font-weight: 400;
    letter-spacing: var(--tracking-wider);
    color: var(--color-text-primary);
    text-decoration: none;
    
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing-sm) var(--spacing-md);
    
    position: relative;
    transition: color var(--transition-normal);
  }

  /* Underline effect */
  .nav-button::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 1px;
    background-color: var(--color-primary);
    transition: width var(--transition-normal), left var(--transition-normal);
  }

  .nav-button:hover {
    color: var(--color-primary);
  }

  .nav-button:hover::after {
    width: 100%;
    left: 0;
  }

  .nav-button:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 4px;
    border-radius: 2px;
  }

  /* ============================================
     MOBILE RESPONSIVE (max-width: 768px)
     ============================================ */
  @media (max-width: 768px) {
    /* Hide desktop menu button */
    .menu-button {
      display: none;
    }

    /* Adjust header for mobile */
    .main-header {
      height: 65px;
      background-color: transparent;
      backdrop-filter: none;
      box-shadow: none;
      padding: 0;
    }

    /* Add background when visible on mobile */
    .main-header.header--visible {
      background-color: var(--color-background);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      transition: transform 0.6s cubic-bezier(0.4, 0.0, 0.2, 1),
                  background-color 0.3s ease 0.2s,
                  box-shadow 0.3s ease 0.2s;
    }

    /* Tighter navigation spacing */
    .header-nav {
      gap: var(--spacing-lg);
    }

    .nav-button {
      font-size: var(--text-sm);
      padding: var(--spacing-xs) var(--spacing-sm);
    }
  }

  /* ============================================
     ACCESSIBILITY
     ============================================ */
  
  /* Screen reader only class */
  :global(.sr-only) {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .main-header,
    .nav-button,
    .nav-button::after,
    .menu-button {
      transition: none;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .main-header {
      background-color: white;
      border-bottom: 2px solid black;
    }

    .menu-button,
    .nav-button {
      border: 1px solid currentColor;
    }
  }

  /* Print styles */
  @media print {
    .menu-button {
      display: none;
    }

    .main-header {
      position: static;
      transform: none;
      box-shadow: none;
    }
  }
</style>
