---
export interface Props {
  class?: string;
}

const {
  class: className = '',
} = Astro.props;

const headerClasses = [
  'header-container',
  className
].filter(Boolean).join(' ');
---

<div class={headerClasses}>
  <!-- Minimalist MENU button (top-right fixed) -->
  <button 
    class="menu-button interactive-element" 
    type="button"
    aria-label="Toggle navigation menu"
    aria-expanded="false"
    aria-controls="slide-header"
  >
    MENU
  </button>

  <!-- Slide-down header with initial hidden state -->
  <header class="slide-header slide-header--initial-hidden" id="slide-header" aria-hidden="true">
    <nav class="slide-nav" role="navigation" aria-label="Main navigation">
      <button 
        class="nav-button about-button"
        onclick="document.getElementById('about-dialog').showModal()"
      >
        About
      </button>
      <a 
        href="/"
        class="nav-button work-button"
        aria-label="View work and projects"
      >
        Works
      </a>
      <button 
        class="nav-button contact-button"
        onclick="document.getElementById('contact-dialog').showModal()"
      >
        Contact
      </button>
    </nav>
  </header>
</div>

<!-- Header functionality script -->
<script>
  class MinimalistHeader {
    menuButton: HTMLElement | null;
    slideHeader: HTMLElement | null;
    isMenuOpen: boolean;
    boundToggleMenu: () => void;

    constructor() {
      this.menuButton = document.querySelector('.menu-button');
      this.slideHeader = document.querySelector('.slide-header');
      this.isMenuOpen = false;
      this.boundToggleMenu = this.toggleMenu.bind(this);
      
      this.init();
    }

    init() {
      if (!this.menuButton || !this.slideHeader) return;

      // Remove initial hidden class immediately to enable transitions
      this.slideHeader.classList.remove('slide-header--initial-hidden');

      const mediaQuery = window.matchMedia('(max-width: 640px)');
      
      this.handleViewportChange(mediaQuery); // Initial check
      mediaQuery.addEventListener('change', (e) => this.handleViewportChange(e));

      // Close menu on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isMenuOpen) {
          this.closeMenu();
        }
      });

      // Add scroll listener for mobile menu
      this.setupScrollListener();
      
      // Force initial state on mobile after a short delay to handle iOS rendering
      if (mediaQuery.matches) {
        setTimeout(() => {
          const scrollY = Math.max(0, window.scrollY);
          if (scrollY === 0 && this.slideHeader) {
            this.slideHeader.classList.remove('slide-header--scrolled');
            this.slideHeader.setAttribute('aria-hidden', 'true');
          }
        }, 100);
      }
    }

    handleViewportChange(e: MediaQueryList | MediaQueryListEvent) {
      if (e.matches) {
        // Mobile view: header visibility controlled by scroll
        if (this.slideHeader) {
          this.slideHeader.classList.remove('slide-header--open');
          
          // Use Math.max to handle iOS elastic scrolling
          const scrollY = Math.max(0, window.scrollY);
          
          // Ensure proper initial state based on scroll position
          if (scrollY <= 10) { // Small threshold for iOS bounce
            this.slideHeader.classList.remove('slide-header--scrolled');
            this.slideHeader.setAttribute('aria-hidden', 'true');
          } else {
            this.slideHeader.classList.add('slide-header--scrolled');
            this.slideHeader.setAttribute('aria-hidden', 'false');
          }
        }
        if (this.menuButton) {
          this.menuButton.removeEventListener('click', this.boundToggleMenu);
        }
      } else {
        // Desktop view: header is toggleable
        this.slideHeader?.classList.remove('slide-header--scrolled'); // Clean up mobile class
        if (this.menuButton) {
          this.menuButton.addEventListener('click', this.boundToggleMenu);
        }
        // When switching to desktop, ensure menu is closed initially
        this.closeMenu();
      }
    }

    setupScrollListener() {
      let lastScrollY = window.scrollY;
      let ticking = false;
      let isTransitioning = false;
      
      const updateHeaderVisibility = () => {
        const isMobile = window.matchMedia('(max-width: 768px)').matches;
        if (isMobile && this.slideHeader && !isTransitioning) {
          // Use Math.max to handle iOS elastic scrolling (negative values)
          const scrollY = Math.max(0, window.scrollY);
          const shouldShow = scrollY > 20;
          
          // Only update if state actually changes
          const isCurrentlyVisible = this.slideHeader.classList.contains('slide-header--scrolled');
          if (shouldShow !== isCurrentlyVisible) {
            isTransitioning = true;
            
            // iOS Safari specific: Force style recalculation
            if (this.slideHeader) {
              // Read computed style to force style calculation
              window.getComputedStyle(this.slideHeader).transform;
              
              // Toggle class
              this.slideHeader.classList.toggle('slide-header--scrolled', shouldShow);
              this.slideHeader.setAttribute('aria-hidden', shouldShow ? 'false' : 'true');
              
              // Force another reflow after class change for iOS
              void this.slideHeader.offsetHeight;
            }
            
            // Reset transition flag after animation completes (match 0.6s duration)
            setTimeout(() => {
              isTransitioning = false;
            }, 600);
          }
        }
        ticking = false;
      };
      
      window.addEventListener('scroll', () => {
        if (!ticking) {
          window.requestAnimationFrame(updateHeaderVisibility);
          ticking = true;
        }
      }, { passive: true });
      
      // Initial check on page load for mobile
      if (window.matchMedia('(max-width: 768px)').matches) {
        updateHeaderVisibility();
      }
    }

    toggleMenu() {
      if (this.isMenuOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    openMenu() {
      this.slideHeader.classList.add('slide-header--open');
      this.menuButton.setAttribute('aria-expanded', 'true');
      this.slideHeader.setAttribute('aria-hidden', 'false');
      this.isMenuOpen = true;
      
      // Announce to screen readers
      this.announceToScreenReader('Navigation menu opened');
    }

    closeMenu() {
      this.slideHeader.classList.remove('slide-header--open');
      this.menuButton.setAttribute('aria-expanded', 'false');
      this.slideHeader.setAttribute('aria-hidden', 'true');
      this.isMenuOpen = false;
      
      // Announce to screen readers
      this.announceToScreenReader('Navigation menu closed');
    }

    announceToScreenReader(message: string) {
      // Create or find existing live region for header announcements
      let liveRegion = document.getElementById('header-live-region');
      if (!liveRegion) {
        liveRegion = document.createElement('div');
        liveRegion.id = 'header-live-region';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.style.position = 'absolute';
        liveRegion.style.left = '-10000px';
        liveRegion.style.width = '1px';
        liveRegion.style.height = '1px';
        liveRegion.style.overflow = 'hidden';
        document.body.appendChild(liveRegion);
      }

      // Clear and set message
      liveRegion.textContent = '';
      setTimeout(() => {
        liveRegion.textContent = message;
      }, 100);
    }
  }

  // Initialize header when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new MinimalistHeader());
  } else {
    new MinimalistHeader();
  }
</script>

<style>
  .header-container {
    position: relative;
    z-index: 1000;
    /* Move perspective to parent for proper 3D rendering on mobile */
    perspective: 1000px;
    -webkit-perspective: 1000px;
  }

  /* Minimalist MENU button - positioned top-right */
  .menu-button {
    position: fixed;
    top: var(--spacing-md);
    right: var(--spacing-lg);
    z-index: 1001;
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing-sm);
    font-family: var(--font-heading);
    font-size: var(--text-base);
    font-weight: 400;
    color: var(--color-text-primary);
    letter-spacing: var(--tracking-wider);
    transition: all var(--transition-normal);
  }

  .menu-button:hover {
    color: var(--color-primary);
  }

  /* Slide-down header - Based on wireframe: 85px for 982px viewport = 8.66vh */
  .slide-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: max(8.66vh, 85px);
    background-color: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(10px);
    transform: translate3d(0, -100%, 0);
    transition: transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    z-index: 1000;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: var(--spacing-md);
    padding-right: var(--spacing-lg);
    box-sizing: border-box;
    /* Force hardware acceleration for smooth WebKit animations */
    -webkit-transform: translate3d(0, -100%, 0);
    -webkit-transition: -webkit-transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    will-change: transform;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  .slide-header--open {
    transform: translate3d(0, 0, 0);
    -webkit-transform: translate3d(0, 0, 0);
  }

  .slide-nav {
    display: flex;
    gap: var(--spacing-2xl);
    align-items: center;
  }

  .nav-button {
    font-family: var(--font-heading);
    font-size: var(--text-base);
    font-weight: 400;
    letter-spacing: var(--tracking-wider);
    color: var(--color-text-primary);
    text-decoration: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing-sm) var(--spacing-md);
    transition: all var(--transition-normal);
    position: relative;
  }

  .nav-button::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 1px;
    background-color: var(--color-primary);
    transition: all var(--transition-normal);
    transform: translateX(-50%);
  }

  .nav-button:hover {
    color: var(--color-primary);
  }

  .nav-button:hover::after {
    width: 100%;
  }

  /* Button styling for nav context */
  button.nav-button {
    background: none;
    border: none;
    cursor: pointer;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .menu-button {
      display: none;
    }

    .slide-header {
      /* Use only -webkit prefixed properties for iOS consistency */
      -webkit-transform: translate3d(0, -110%, 0);
      transform: translate3d(0, -110%, 0);
      height: 65px;
      background-color: transparent;
      backdrop-filter: none;
      box-shadow: none;
      /* Simplify to single transform transition for iOS */
      -webkit-transition: -webkit-transform 0.6s cubic-bezier(0.4, 0.0, 0.6, 1);
      transition: transform 0.6s cubic-bezier(0.4, 0.0, 0.6, 1);
      justify-content: center;
      align-items: center;
      padding-top: 0;
      padding-right: 0;
      /* Force hardware acceleration */
      -webkit-will-change: transform;
      will-change: transform;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      /* Prevent subpixel rendering issues */
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      /* Enable 3D rendering context */
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
      /* Force layer creation */
      -webkit-transform-origin: center top;
      transform-origin: center top;
    }
    
    /* Initial hidden state - no transition on page load */
    .slide-header.slide-header--initial-hidden {
      -webkit-transition: none;
      transition: none;
    }
    
    .slide-header.slide-header--scrolled {
      -webkit-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0);
      /* Animate background separately to avoid iOS jank */
      background-color: var(--color-background);
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      -webkit-transition: -webkit-transform 0.6s cubic-bezier(0.4, 0.0, 0.6, 1),
                          background-color 0.3s ease 0.2s,
                          box-shadow 0.3s ease 0.2s;
      transition: transform 0.6s cubic-bezier(0.4, 0.0, 0.6, 1),
                  background-color 0.3s ease 0.2s,
                  box-shadow 0.3s ease 0.2s;
    }

    .slide-nav {
      gap: var(--spacing-lg);
    }

    .nav-button {
      font-size: var(--text-base);
      padding: var(--spacing-sm);
    }

    button.nav-button {
      font-size: var(--text-base);
      padding: var(--spacing-sm);
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .slide-header {
      background-color: white;
      border-bottom-color: black;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .slide-header,
    .nav-button,
    .nav-button::after {
      transition: none;
    }
  }
</style>
