---
import AboutModal from '../modal/AboutModal.astro';
import ContactModal from '../modal/ContactModal.astro';
import ModalTrigger from '../modal/ModalTrigger.astro';

export interface Props {
  class?: string;
}

const {
  class: className = '',
} = Astro.props;

const headerClasses = [
  'header-container',
  className
].filter(Boolean).join(' ');
---

<div class={headerClasses}>
  <!-- Minimalist MENU button (top-right fixed) -->
  <button 
    class="menu-button nav-text interactive-element" 
    type="button"
    aria-label="Toggle navigation menu"
    aria-expanded="false"
    aria-controls="slide-header"
  >
    MENU
  </button>

  <!-- Slide-down header -->
  <header class="slide-header" id="slide-header" aria-hidden="true">
    <nav class="slide-nav" role="navigation" aria-label="Main navigation">
      <ModalTrigger modalId="about-modal" variant="text" class="nav-button about-button">
        About
      </ModalTrigger>
      <a 
        href="/projects"
        class="nav-button work-button"
        aria-label="View work and projects"
      >
        Work
      </a>
      <ModalTrigger modalId="contact-modal" variant="text" class="nav-button contact-button">
        Contact
      </ModalTrigger>
    </nav>
  </header>

  <!-- Modal Components -->
  <AboutModal />
  <ContactModal />
</div>

<!-- Header functionality script -->
<script>
  import { isModalActive } from '../modal/modal-manager.js';

  class MinimalistHeader {
    constructor() {
      this.menuButton = document.querySelector('.menu-button');
      this.slideHeader = document.querySelector('.slide-header');
      this.isMenuOpen = false;
      
      this.init();
    }

    init() {
      if (this.menuButton && this.slideHeader) {
        this.menuButton.addEventListener('click', () => this.toggleMenu());
      }

      // Close menu on escape key (if no modal is open)
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isMenuOpen && !isModalActive()) {
          this.closeMenu();
        }
      });

      // Close menu when a modal is opened
      document.addEventListener('modal:opened', () => {
        if (this.isMenuOpen) {
          this.closeMenu();
        }
      });
    }

    toggleMenu() {
      if (this.isMenuOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    openMenu() {
      this.slideHeader.classList.add('slide-header--open');
      this.menuButton.setAttribute('aria-expanded', 'true');
      this.slideHeader.setAttribute('aria-hidden', 'false');
      this.isMenuOpen = true;
      
      // Announce to screen readers
      this.announceToScreenReader('Navigation menu opened');
    }

    closeMenu() {
      this.slideHeader.classList.remove('slide-header--open');
      this.menuButton.setAttribute('aria-expanded', 'false');
      this.slideHeader.setAttribute('aria-hidden', 'true');
      this.isMenuOpen = false;
      
      // Announce to screen readers
      this.announceToScreenReader('Navigation menu closed');
    }

    announceToScreenReader(message) {
      // Create or find existing live region for header announcements
      let liveRegion = document.getElementById('header-live-region');
      if (!liveRegion) {
        liveRegion = document.createElement('div');
        liveRegion.id = 'header-live-region';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.style.position = 'absolute';
        liveRegion.style.left = '-10000px';
        liveRegion.style.width = '1px';
        liveRegion.style.height = '1px';
        liveRegion.style.overflow = 'hidden';
        document.body.appendChild(liveRegion);
      }

      // Clear and set message
      liveRegion.textContent = '';
      setTimeout(() => {
        liveRegion.textContent = message;
      }, 100);
    }
  }

  // Initialize header when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new MinimalistHeader());
  } else {
    new MinimalistHeader();
  }
</script>

<style>
  .header-container {
    position: relative;
    z-index: 1000;
  }

  /* Minimalist MENU button - positioned top-right */
  .menu-button {
    position: fixed;
    top: var(--spacing-md);
    right: var(--spacing-lg);
    z-index: 1001;
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing-sm);
    font-family: var(--font-alt-heading);
    font-size: var(--text-base);
    font-weight: 400;
    color: var(--color-text-primary);
    letter-spacing: var(--tracking-wider);
    transition: all var(--transition-normal);
  }

  .menu-button:hover {
    color: var(--color-primary);
  }

  /* Slide-down header - Based on wireframe: 85px for 982px viewport = 8.66vh */
  .slide-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 8.66vh;
    background-color: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(10px);
    transform: translateY(-100%);
    transition: transform var(--transition-slow);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .slide-header--open {
    transform: translateY(0);
  }

  .slide-nav {
    display: flex;
    gap: var(--spacing-2xl);
    align-items: center;
  }

  .nav-button {
    font-family: var(--font-alt-heading);
    font-size: var(--text-lg);
    font-weight: 400;
    letter-spacing: var(--tracking-wider);
    color: var(--color-text-primary);
    text-decoration: none;
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing-xs) var(--spacing-md);
    transition: all var(--transition-normal);
    position: relative;
  }

  .nav-button::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 1px;
    background-color: var(--color-primary);
    transition: all var(--transition-normal);
    transform: translateX(-50%);
  }

  .nav-button:hover {
    color: var(--color-primary);
  }

  .nav-button:hover::after {
    width: 100%;
  }

  /* Modal trigger styling - override ModalTrigger styles for nav context */
  .nav-button.modal-trigger {
    background: none !important;
    color: var(--color-text-primary) !important;
    padding: var(--spacing-xs) var(--spacing-md) !important;
    font-family: var(--font-alt-heading) !important;
    font-size: var(--text-lg) !important;
    font-weight: 400 !important;
    letter-spacing: var(--tracking-wider) !important;
  }

  .nav-button.modal-trigger:hover {
    color: var(--color-primary) !important;
    background: none !important;
    transform: none !important;
    box-shadow: none !important;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .menu-button {
      top: var(--spacing-md);
      right: var(--spacing-md);
    }

    .slide-nav {
      gap: var(--spacing-lg);
    }

    .nav-button {
      font-size: var(--text-base);
      padding: var(--spacing-sm);
    }

    .nav-button.modal-trigger {
      font-size: var(--text-base) !important;
      padding: var(--spacing-sm) !important;
    }
  }

  @media (max-width: 480px) {
    .menu-button {
      top: var(--spacing-sm);
      right: var(--spacing-sm);
      padding: var(--spacing-xs);
    }

    .slide-nav {
      flex-direction: column;
      gap: var(--spacing-md);
    }

    .slide-header {
      height: auto;
      min-height: 8.66vh;
      padding: var(--spacing-md) 0;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .slide-header {
      background-color: white;
      border-bottom-color: black;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .slide-header,
    .nav-button,
    .nav-button::after {
      transition: none;
    }
  }
</style>