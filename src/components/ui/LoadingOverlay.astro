---
// LoadingOverlay.astro - Elegant loading overlay with serif typography
// Shows loading progress from 0% to 100% with smooth transitions

export interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div id="loading-overlay" class={`loading-overlay ${className}`}>
  <div class="loading-content">
    <h1 class="loading-title">
      <span class="loading-title-line">LUCINDA</span>
      <span class="loading-title-line">BURMAN</span>
    </h1>
    <div class="loading-progress">
      <span id="loading-percentage">0%</span>
    </div>
  </div>
</div>

<script>
  let isViewTransition = false;
  let overlayInstance = null;

  function initializeLoadingOverlay() {
    const overlay = document.getElementById('loading-overlay');
    const percentageElement = document.getElementById('loading-percentage');
    
    if (!overlay || !percentageElement) return;

    // Detect if this is a view transition navigation
    const isNavigatingWithViewTransitions = document.startViewTransition !== undefined && 
                                           performance.navigation?.type === 1; // navigate type
    
    // Check if we're coming from a cached page (back/forward navigation)
    const isCachedNavigation = performance.getEntriesByType('navigation')[0]?.type === 'back_forward';
    
    // Don't show loading overlay for view transitions or cached navigation
    if (isViewTransition || isNavigatingWithViewTransitions || isCachedNavigation) {
      console.log('LoadingOverlay: Skipping overlay for view transition or cached navigation');
      overlay.style.display = 'none';
      document.body.classList.remove('loading');
      // Still dispatch the event for components that depend on it
      setTimeout(() => {
        document.dispatchEvent(new CustomEvent('loadingComplete'));
      }, 50);
      return;
    }

    // Create overlay instance to avoid conflicts
    if (overlayInstance) {
      overlayInstance.destroy();
    }
    overlayInstance = new LoadingOverlayController(overlay, percentageElement);
  }

  class LoadingOverlayController {
    constructor(overlay, percentageElement) {
      this.overlay = overlay;
      this.percentageElement = percentageElement;
      this.currentProgress = 0;
      this.targetProgress = 0;
      this.animationFrame = null;
      this.isDestroyed = false;
      
      this.init();
    }

    init() {
      // Expose progress updater globally
      window.updateLoadingProgress = (progress) => this.updateProgress(progress);
      
      // Initial setup
      document.body.classList.add('loading');
      this.overlay.style.display = 'flex';
      
      // Start with small progress to show activity
      setTimeout(() => this.updateProgress(15), 100);
      
      // Add safety checkpoints to prevent sticking
      setTimeout(() => this.updateProgress(30), 500);
      setTimeout(() => this.updateProgress(50), 1000);
      
      // Reduced fallback timeout for better UX
      setTimeout(() => {
        if (!this.isDestroyed) {
          console.log('LoadingOverlay: Fallback timeout reached (1.5s), forcing completion');
          this.updateProgress(100);
        }
      }, 1500);
    }

    updateProgress(progress) {
      if (this.isDestroyed) return;
      
      this.targetProgress = Math.min(100, Math.max(0, progress));
      if (!this.animationFrame) {
        this.animateProgress();
      }
    }

    animateProgress() {
      if (this.isDestroyed) return;

      if (this.currentProgress < this.targetProgress) {
        // Much faster animation for cached images (when jumping to 100% quickly)
        const isCachedScenario = this.targetProgress >= 100 && this.currentProgress < 30;
        const speed = isCachedScenario ? 0.4 : 0.15;
        this.currentProgress += (this.targetProgress - this.currentProgress) * speed;
        this.percentageElement.textContent = `${Math.floor(this.currentProgress)}%`;
        
        // Force completion if very close to target
        if (this.currentProgress >= this.targetProgress - 1) {
          this.currentProgress = this.targetProgress;
          this.percentageElement.textContent = `${Math.floor(this.targetProgress)}%`;
        }
        
        this.animationFrame = requestAnimationFrame(() => this.animateProgress());
      } else if (this.currentProgress >= 100) {
        // Ensure display shows 100%
        this.percentageElement.textContent = '100%';
        
        // Fade out overlay when complete with better timing
        setTimeout(() => {
          if (!this.isDestroyed) {
            console.log('LoadingOverlay: Starting fade out sequence...');
            this.overlay.classList.add('fade-out');
            setTimeout(() => {
              if (!this.isDestroyed) {
                this.overlay.style.display = 'none';
                document.body.classList.remove('loading');
                console.log('LoadingOverlay: Overlay hidden, dispatching loadingComplete event');
                // Trigger content reveal - this coordinates with MasonryGrid animations
                document.dispatchEvent(new CustomEvent('loadingComplete'));
              }
            }, 600); // Match CSS transition duration
          }
        }, 300); // Slightly longer pause to ensure images are visually ready
      } else {
        this.animationFrame = null;
      }
    }

    destroy() {
      this.isDestroyed = true;
      if (this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
        this.animationFrame = null;
      }
      // Clean up global reference
      if (window.updateLoadingProgress) {
        window.updateLoadingProgress = null;
      }
    }
  }

  // Handle view transition detection
  document.addEventListener('astro:before-preparation', () => {
    console.log('LoadingOverlay: View transition starting, marking as transition');
    isViewTransition = true;
    
    // Clean up current overlay instance
    if (overlayInstance) {
      overlayInstance.destroy();
      overlayInstance = null;
    }
  });

  document.addEventListener('astro:after-swap', () => {
    console.log('LoadingOverlay: After view transition swap');
    // Reset transition flag after a delay to allow for proper detection
    setTimeout(() => {
      isViewTransition = false;
      initializeLoadingOverlay();
    }, 100);
  });

  // Initialize on DOM ready (for initial page load only)
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLoadingOverlay);
  } else {
    // Only initialize if this is the initial page load, not a view transition
    if (!isViewTransition) {
      initializeLoadingOverlay();
    }
  }
</script>

<style>
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--color-background);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    transition: opacity 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
  }
  
  .loading-overlay.fade-out {
    opacity: 0;
  }
  
  .loading-content {
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xl);
  }
  
  .loading-title {
    font-family: var(--font-heading);
    font-size: clamp(4rem, 10vw, 8rem);
    font-weight: 100;
    letter-spacing: var(--tracking-widest);
    line-height: var(--leading-tight);
    color: var(--color-text);
    margin: 0;
  }
  
  .loading-title-line {
    display: block;
    opacity: 0;
    transform: translateY(20px);
    animation: titleReveal 0.8s cubic-bezier(0.4, 0.0, 0.2, 1) forwards;
  }
  
  .loading-title-line:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .loading-progress {
    position: relative;
    overflow: hidden;
  }
  
  #loading-percentage {
    font-family: var(--font-heading);
    font-size: var(--text-xl);
    font-weight: 300;
    letter-spacing: var(--tracking-wide);
    color: var(--color-text-secondary);
    opacity: 0;
    transform: translateY(10px);
    animation: progressReveal 0.6s cubic-bezier(0.4, 0.0, 0.2, 1) 0.8s forwards;
    
    /* Monospace digits for consistent width */
    font-variant-numeric: tabular-nums;
  }
  
  @keyframes titleReveal {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes progressReveal {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Prevent scrolling while loading */
  :global(body.loading) {
    overflow: hidden;
  }
  
  /* Mobile adjustments */
  @media (max-width: 768px) {
    .loading-content {
      gap: var(--spacing-lg);
    }
    
    .loading-title {
      font-size: clamp(1.5rem, 8vw, 2.5rem);
    }
    
    #loading-percentage {
      font-size: var(--text-lg);
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .loading-title-line,
    #loading-percentage {
      animation: none;
      opacity: 1;
      transform: none;
    }
    
    .loading-overlay {
      transition: none;
    }
  }
</style>
