---
export interface Props {
  id: string;
  title: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  closeOnOverlay?: boolean;
  closeOnEscape?: boolean;
  initialFocus?: string;
  restoreFocus?: boolean;
  class?: string;
}

const {
  id,
  title,
  size = 'md',
  closeOnOverlay = true,
  closeOnEscape = true,
  initialFocus,
  restoreFocus = true,
  class: className,
} = Astro.props;
---

<div 
  id={id}
  class={`modal ${className || ''}`}
  role="dialog" 
  aria-modal="true"
  aria-labelledby={`${id}-title`}
  aria-describedby={`${id}-description`}
  aria-hidden="true"
  data-modal-id={id}
  data-close-on-overlay={closeOnOverlay}
  data-close-on-escape={closeOnEscape}
  data-initial-focus={initialFocus}
  data-restore-focus={restoreFocus}
>
  <div class="modal__backdrop" data-modal-backdrop></div>
  <div class={`modal__container modal__container--${size}`}>
    <div class="modal__content" role="document">
      <header class="modal__header">
        <slot name="header">
          <h2 id={`${id}-title`} class="modal__title">{title}</h2>
        </slot>
        <button 
          type="button"
          class="modal__close focusable" 
          aria-label="Close modal"
          data-modal-close
        >
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M6 6L18 18M6 18L18 6" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </header>
      <main class="modal__body">
        <div id={`${id}-description`} class="sr-only">
          <slot name="description">Modal dialog content</slot>
        </div>
        <slot name="content" />
      </main>
      <footer class="modal__footer">
        <slot name="footer" />
      </footer>
    </div>
  </div>
</div>

<style>
  /* Modal overlay and positioning */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    
    /* Animation setup */
    opacity: 0;
    visibility: hidden;
    transform: scale(0.95);
    transition: all var(--transition-normal);
    pointer-events: none;
  }

  .modal--active {
    opacity: 1;
    visibility: visible;
    transform: scale(1);
    pointer-events: auto;
  }

  /* Ensure modal content is focusable when active */
  .modal--active * {
    pointer-events: auto;
  }

  .modal__backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--color-overlay);
    transition: opacity var(--transition-normal);
  }

  /* Mobile-first: Full viewport modal */
  .modal__container {
    position: relative;
    z-index: 1001;
    width: 100vw;
    height: 100vh;
    max-width: none;
    max-height: none;
    margin: 0;
  }

  .modal__content {
    background: var(--color-modal-bg);
    width: 100%;
    height: 100%;
    border-radius: 0;
    padding: var(--spacing-lg);
    overflow-y: auto;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  /* Desktop: 50vw centered with blur */
  @media (min-width: var(--breakpoint-md)) {
    .modal__backdrop {
      backdrop-filter: blur(5px);
    }
    
    .modal__container {
      width: 50vw;
      height: 100vh;
      max-width: 600px;
      min-width: 400px;
    }

    .modal__content {
      border-radius: 2px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      padding: var(--spacing-xl);
    }
  }

  /* Large desktop refinements */
  @media (min-width: var(--breakpoint-xl)) {
    .modal__content {
      padding: var(--spacing-2xl);
    }
  }

  /* Modal header */
  .modal__header {
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    margin-bottom: var(--spacing-lg);
    flex-shrink: 0;
  }

  .modal__title {
    font-family: var(--font-alt-heading);
    font-size: var(--text-2xl);
    font-weight: 400;
    line-height: var(--leading-tight);
    color: var(--color-text-primary);
    margin: 0;
    padding-right: var(--spacing-md);
  }

  .modal__close {
    background: transparent;
    border: none;
    padding: var(--spacing-xs);
    cursor: pointer;
    color: var(--color-text-primary);
    flex-shrink: 0;
    border-radius: 2px;
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal__close:hover {
    background: rgba(0, 0, 0, 0.05);
    color: var(--color-primary);
  }

  .modal__close:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* Modal body */
  .modal__body {
    flex: 1;
    overflow-y: auto;
  }

  /* Modal footer */
  .modal__footer {
    margin-top: var(--spacing-lg);
    flex-shrink: 0;
  }

  .modal__footer:empty {
    display: none;
  }

  /* Size variants */
  .modal__container--sm {
    width: 90vw;
    max-width: 400px;
  }

  .modal__container--lg {
    width: 60vw;
    max-width: 800px;
  }

  .modal__container--xl {
    width: 80vw;
    max-width: 1200px;
  }

  @media (min-width: var(--breakpoint-md)) {
    .modal__container--sm {
      width: 40vw;
      min-width: 320px;
    }
    
    .modal__container--lg {
      width: 60vw;
      min-width: 600px;
    }
    
    .modal__container--xl {
      width: 80vw;
      min-width: 800px;
    }
  }

  /* Accessibility utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .focusable:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }

  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .modal {
      transition: opacity var(--transition-fast);
      transform: none;
    }
    
    .modal__backdrop {
      backdrop-filter: none;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .modal__content {
      border: 2px solid;
    }
    
    .modal__close {
      border: 1px solid;
    }
  }
</style>

<script>
  // Import modal manager when component is loaded
  import { initializeModal } from '../../scripts/modal-manager.js';
  
  // Initialize all modal components on the page
  document.addEventListener('DOMContentLoaded', () => {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
      const modalId = modal.getAttribute('data-modal-id');
      if (modalId) {
        initializeModal(modalId);
      }
    });
  });
</script>